import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import os

# Step 1: Load the dataset (Example dataset)
data = {
    'Area': [1400, 1600, 1700, 1875, 1100, 1550, 2350, 2450, 1425, 1700],
    'Bedrooms': [3, 3, 3, 4, 2, 3, 4, 4, 3, 3],
    'Bathrooms': [2, 2, 2, 3, 1, 2, 3, 3, 2, 2],
    'Price': [245000, 312000, 279000, 308000, 199000, 219000, 405000, 324000, 319000, 255000]
}
df = pd.DataFrame(data)

# Step 2: Feature selection and preprocessing
X = df[['Area', 'Bedrooms', 'Bathrooms']]  # Features
y = df['Price']  # Target variable

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 3: Train the Linear Regression Model
model = LinearRegression()
model.fit(X_train, y_train)

# Step 4: Predict on test data
y_pred = model.predict(X_test)

# Step 5: Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

# Step 6: Save output images
output_folder = "output_images"
os.makedirs(output_folder, exist_ok=True)

# 1. Predicted vs Actual Prices
plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred, color='blue')
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='--', linewidth=2)
plt.title('Predicted vs Actual Prices')
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.grid()
plt.savefig(f"{output_folder}/predicted_vs_actual.png")
plt.close()

# 2. Residuals Plot
residuals = y_test - y_pred
plt.figure(figsize=(8, 6))
plt.scatter(y_pred, residuals, color='purple')
plt.axhline(y=0, color='red', linestyle='--', linewidth=2)
plt.title('Residuals Plot')
plt.xlabel('Predicted Prices')
plt.ylabel('Residuals')
plt.grid()
plt.savefig(f"{output_folder}/residuals_plot.png")
plt.close()

# 3. Training Data Predictions
y_train_pred = model.predict(X_train)
plt.figure(figsize=(8, 6))
plt.scatter(y_train, y_train_pred, color='green')
plt.plot([min(y_train), max(y_train)], [min(y_train), max(y_train)], color='black', linestyle='--', linewidth=2)
plt.title('Training Data Predictions')
plt.xlabel('Actual Prices (Training)')
plt.ylabel('Predicted Prices (Training)')
plt.grid()
plt.savefig(f"{output_folder}/training_predictions.png")
plt.close()

# 4. Feature Importance (Coefficient Visualization)
features = X.columns
coefficients = model.coef_
plt.figure(figsize=(8, 6))
plt.bar(features, coefficients, color='orange')
plt.title('Feature Importance')
plt.xlabel('Features')
plt.ylabel('Coefficient Value')
plt.grid()
plt.savefig(f"{output_folder}/feature_importance.png")
plt.close()

print(f"Images saved in folder: {output_folder}")
